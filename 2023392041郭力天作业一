import numpy as np

def banker_algorithm(Max, Allocated, Available, Request, process_id):
    """
    银行家算法核心实现
    参数:
        Max: 最大需求矩阵 (二维列表)
        Allocated: 已分配矩阵 (二维列表)
        Available: 可用资源向量 (一维列表)
        Request: 进程请求资源向量 (一维列表)
        process_id: 请求资源的进程ID
    返回:
        (是否可分配, 分配后Max, 分配后Allocated, 分配后Available, 分配后Need)
    """
    # 转换为numpy数组便于矩阵运算
    Max = np.array(Max, dtype=int)
    Allocated = np.array(Allocated, dtype=int)
    Available = np.array(Available, dtype=int)
    Request = np.array(Request, dtype=int)
    Need = Max - Allocated  # 计算需求矩阵
    
    # 步骤1：检查请求是否超过声明的最大需求
    if np.any(Request > Need[process_id]):
        print(f"错误：进程{process_id}请求资源超过声明的最大需求")
        return False, Max, Allocated, Available, Need.tolist()
    
    # 步骤2：检查请求是否超过系统可用资源
    if np.any(Request > Available):
        print(f"错误：进程{process_id}请求资源超过系统可用资源，需等待")
        return False, Max, Allocated, Available, Need.tolist()
    
    # 步骤3：尝试分配资源（生成临时状态）
    temp_allocated = Allocated.copy()
    temp_available = Available.copy()
    temp_need = Need.copy()
    
    temp_allocated[process_id] += Request
    temp_available -= Request
    temp_need[process_id] -= Request
    
    # 步骤4：检查分配后的系统安全性
    is_safe, safe_seq = _is_safe_state(Max, temp_allocated, temp_available)
    
    if is_safe:
        print(f"系统处于安全状态，资源可分配给进程{process_id}")
        print(f"安全序列：{safe_seq}")
        return True, Max, temp_allocated, temp_available, temp_need.tolist()
    else:
        print(f"系统处于不安全状态，拒绝分配资源给进程{process_id}")
        return False, Max, Allocated, Available, Need.tolist()

def _is_safe_state(Max, Allocated, Available):
    """检查系统是否处于安全状态（私有函数）"""
    n_processes, n_resources = Allocated.shape
    Need = Max - Allocated
    Work = Available.copy()  # 工作向量
    Finish = np.zeros(n_processes, dtype=bool)  # 完成状态向量
    safe_sequence = []      # 安全序列
    
    # 查找可完成的进程直到无法找到或全部完成
    while not all(Finish):
        found = False
        for i in range(n_processes):
            if not Finish[i] and np.all(Need[i] <= Work):
                # 进程i可获取资源并完成
                Work += Allocated[i]
                Finish[i] = True
                safe_sequence.append(i)
                found = True
                break
        if not found: break  # 无进程可完成，系统不安全
    
    is_safe = all(Finish)
    return is_safe, safe_sequence if is_safe else []

# --------------------- 示例用法 ---------------------
if __name__ == "__main__":
    # 示例矩阵（5进程3资源）
    Max = [
        [7, 5, 3], [3, 2, 2], [9, 0, 2], [2, 2, 2], [4, 3, 3]
    ]
    Allocated = [
        [0, 1, 0], [2, 0, 0], [3, 0, 2], [2, 1, 1], [0, 0, 2]
    ]
    Available = [3, 3, 2]
    Request = [1, 0, 2]  # 进程1的资源请求
    
    print("===== 银行家算法演示 =====")
    print(f"初始可用资源：{Available}")
    
    # 执行算法
    can_allocate, _, allocated, available, need = banker_algorithm(
        Max, Allocated, Available, Request, process_id=1
    )
    
    if can_allocate:
        print("\n分配后系统状态：")
        print(f"已分配矩阵：\n{allocated}")
        print(f"可用资源：{available}")
        print(f"需求矩阵：\n{need}")
