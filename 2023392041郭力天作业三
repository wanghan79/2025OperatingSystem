一
1. 地址映射：将程序的逻辑地址转换为内存物理地址的过程。

2. 动态重定位：程序执行时，由硬件机构动态完成逻辑地址到物理地址转换，地址变换在程序运行期间进行。

3. 虚拟存储器：基于内存和外存，具有请求调入和置换功能，为用户提供比实际内存大的“虚拟”内存空间的存储系统。

4. 静态链接：程序运行前，将各个目标模块及所需库函数链接成一个完整的可执行文件，之后不再拆分。

5. 对换：把内存中暂时不能运行的进程或暂时不用的程序、数据换出到外存，把外存中需要运行的进程或程序、数据换入内存。

6. 设备驱动程序：操作系统中直接与硬件设备交互的程序，负责接收上层请求，控制设备完成 I/O 操作，屏蔽设备细节。

7. SPOOLing：即假脱机技术，将独占设备改造成共享设备，缓和 CPU 与 I/O 设备速度不匹配矛盾，常用于打印机等设备。

8. I/O 通道：专门负责输入/输出的处理机，能独立完成内存与外设间的数据传输，减轻 CPU 负担。

9. 文件系统：操作系统中负责管理和存储文件的软件系统，包括文件组织、存储、访问、保护等功能，方便用户操作文件。

10. 目标文件：源程序经编译或汇编后生成的二进制文件，包含机器可执行的指令和数据，还需链接等处理可成为可执行文件 。

11. 文件的逻辑结构：从用户角度看到的文件组织形式，如顺序结构、索引结构等，方便用户存取。

12. 有结构文件：又称记录式文件，由若干记录组成，每条记录有特定结构和含义，如数据库文件。

13. 位示图：用二进制位表示磁盘等存储空间使用情况，每一位对应一个物理块，0 表示空闲，1 表示占用，便于管理空间。

14. 程序接口：操作系统为应用程序提供的接口，通过系统调用等方式，让应用程序请求操作系统服务，如文件操作、进程控制等。

15. 系统调用：应用程序请求操作系统内核完成特定功能的接口，是用户程序与操作系统交互的桥梁，如创建进程、打开文件的系统调用。

16. I/O 中断：当 I/O 设备完成操作或出现错误时，向 CPU 发出的中断信号，使 CPU 暂停当前任务，处理 I/O 相关事件。

17. 文件管理系统：操作系统中用于管理文件的子系统，负责文件的创建、删除、读写、权限管理等，保障文件正确存储和访问。

18. 文件：具有符号名的、在逻辑上有完整意义的一组相关信息项的有序集合，存储在存储设备上，如文本文件、可执行文件等。

19. 文件的逻辑结构：从用户视角组织文件的方式，强调用户对文件的逻辑使用和操作。

20. 文件的物理结构：文件在存储设备上的实际存储组织形式，如连续分配、链接分配、索引分配等，影响文件存储和访问效率 。
二
1. 重定位

2. 绝对装入、可重定位装入、动态运行时装入

3. 静态链接、装入时动态链接、运行时动态链接

4. 空闲分区表、空闲分区链

5. 内存紧凑

6. 固定，系统；可变，用户程序

7. 对换性、虚拟性

8. 文件管理系统、文件集合、文件目录

9. 分区分配算法、分区的分配与回收、分区的合并与保护 

10. 碎片

11. 分页、分段、段页式

12. 快表

13. 逻辑地址、内存物理地址

14. 便于程序模块化处理、便于共享、便于保护、便于动态链接、能较好适应程序变化

15. 地址变换机构

16. 局部性，时间局部性、空间局部性

17. 处理机；（1）通道专为 I/O 操作服务 （2）通道程序由通道指令构成，可独立于 CPU 执行 I/O 操作序列

18. 顺序文件、索引文件、索引顺序文件

19. 单级索引、多级索引、混合索引

20. 动态重定位

21. 设备驱动程序、设备独立性软件、用户层软件

22. 连续分配、链接分配、索引分配；连续分配

23. 高速缓冲存储器、主存储器、辅助存储器

24. 连续分配、离散分配

25. 存储设备特性、文件存取方式

26. 流式文件、顺序文件、索引文件

27. 连续分配、链接分配、索引分配

28. 绝对路径、相对路径

29. 空闲盘块链、空闲盘区链

30. 基于路径的共享、基于索引节点的共享

31. 字符设备、块设备；独占设备、共享设备、虚拟设备

32. DMA 方式、通道方式

33. 单缓冲、循环缓冲、缓冲池

34. 寻道时间、数据传输时间
三
1. 计算机存储器系统层次及分析

• 层次：高速缓存（Cache）、主存（内存）、外存（辅助存储，如硬盘、U盘 ）。

• 内容：Cache 基于 SRAM，靠近 CPU；主存一般是 DRAM，存储运行数据和程序；外存长期存储大量数据，像硬盘、SSD 等。

• 性能分析：从 Cache 到外存，速度递减、容量递增、单位成本递减。利用局部性原理，让 CPU 高频访问 Cache/主存，提升整体效率。

2. 程序从编写到运行过程

• 编写：用编程语言（如 C、Python ）写代码，保存为源文件（.c、.py ）。

• 编译/解释：编译型（如 C ）经编译成目标文件（.o ）、链接成可执行文件；解释型（如 Python ）由解释器逐行解释执行。

• 加载：可执行文件经加载器装入内存，分配地址。

• 运行：CPU 从内存取指令、数据，在 CPU 执行，运行中可能涉及 I/O 等操作，执行完释放资源。

3. 程序链接方式及异同

• 方式：静态链接、装入时动态链接、运行时动态链接。

• 相同点：都把多个模块/库整合，让程序能正确执行。

• 不同点：

◦ 静态链接：程序运行前完成链接，生成完整可执行文件，占内存大，更新难。

◦ 装入时动态链接：装入内存时链接，节省内存，单个模块更新需重新链接。

◦ 运行时动态链接：运行中调用模块时链接，更灵活，利于共享、更新，有运行时开销。

4. 内存动态分区分配算法类型及核心

• 类型：按搜索空闲区顺序，分顺序搜索（如首次适应、循环首次适应 ）、最佳适应、最坏适应等。

• 算法核心：

◦ 首次适应（FF）：从头找首个足够大空闲分区。

◦ 循环首次适应（NF）：从上次结束位置找，均匀使用空闲区。

◦ 最佳适应（BF）：找能满足需求的最小空闲分区，剩碎片小。

◦ 最坏适应（WF）：找最大空闲分区，减少小碎片。

5. 内存动态分区与 CPU 调度算法异同

• 内存动态分区算法：首次适应、最佳适应等，管理内存空间分配，目标是高效利用内存、减少碎片。

• CPU 调度算法：FCFS、SJF、RR 等，分配 CPU 时间，目标是提升系统吞吐量、响应时间等。

• 相同点：都需合理分配资源（内存/CPU ），优化系统性能，有“调度”思想。

• 不同点：管理资源不同（内存空间 vs CPU 时间 ），目标侧重不同（内存利用 vs 进程执行效率 ），算法逻辑基于资源特性（内存分区大小 vs 进程运行时长/优先级 ）。

6. 页面置换与 CPU 调度算法异同

• 页面置换算法：FIFO、LRU、LFU 等，处理内存页面置换，解决虚拟内存中缺页问题，目标是降低缺页率。

• CPU 调度算法：FCFS、SJF、RR 等，分配 CPU 时间给进程。

• 相同点：都为合理分配/置换资源，保障系统高效，需权衡性能指标。

• 不同点：管理资源不同（页面 vs CPU 时间 ），触发场景不同（缺页时 vs 进程就绪时 ），算法依据不同（页面使用频率/顺序 vs 进程运行特征 ）。

7. 页面置换与磁盘调度算法异同

• 页面置换算法：FIFO、LRU 等，管理内存页面，减少缺页，基于内存访问局部性。

• 磁盘调度算法：FCFS、SSTF、SCAN 等，优化磁盘 I/O 寻道，提升磁盘访问效率，基于磁盘物理结构和 I/O 请求队列。

• 相同点：都优化资源（内存/磁盘 ）使用效率，减少“延迟”（缺页/寻道延迟 ）。

• 不同点：针对资源不同（内存页面 vs 磁盘扇区 ），优化目标不同（内存性能 vs 磁盘 I/O 速度 ），算法依据不同（内存访问模式 vs 磁盘 I/O 请求位置 ）。

8. 地址变换过程

• 分页存储：逻辑地址→页号+页内偏移，页表基址+页号找页框号，物理地址=页框号×页大小+页内偏移。

• 分段存储：逻辑地址→段号+段内偏移，段表基址+段号找段基址、段长，检查偏移合法性，物理地址=段基址+段内偏移。

• 段页存储：先分段（同分段变换得段内页表基址 ），再分页（段内页号+页内偏移，通过段内页表找页框号 ），物理地址=页框号×页大小+页内偏移。

9. 中断处理步骤

• 中断请求：设备/异常发中断信号给 CPU。

• 中断响应：CPU 暂停当前程序，保存现场（如 PC、寄存器 ），转中断处理。

• 中断处理：执行中断处理程序，处理设备请求、异常等（如读数据、处理错误 ）。

• 中断返回：恢复现场，继续执行被中断程序。

10. 文件类型分类

• 用途：系统文件（OS 相关 ）、用户文件（用户数据/程序 ）、库文件（供调用 ）。

• 数据类型：文本文件（字符编码 ）、二进制文件（非字符编码，如可执行文件 ）。

• 组织管理：普通文件（存储数据/程序 ）、目录文件（管理文件 ）、特殊文件（设备文件，如 Linux 下 /dev 设备 ）。

11. 文件目录分类及查询

• 分类：单级目录、两级目录、多级目录（树型 ）、无环图目录（带共享 ）。

• 查询方式：单级/两级按名查找；树型从根/当前目录遍历路径；无环图需处理共享、防止循环。

12. 文件结构组织及优劣

• 组织方式：顺序文件（记录顺序存储 ）、索引文件（有索引表 ）、索引顺序文件（结合前两者 ）。

• 优劣：

◦ 顺序文件：顺序访问快，随机访问慢，适合批量读写。

◦ 索引文件：随机访问快，需额外空间存索引，适合频繁随机访问。

◦ 索引顺序文件：兼顾顺序和随机访问，索引小、效率较高，管理稍复杂。

13. 内存与外存分配方式异同

• 内存分配：连续分配（如动态分区 ）、离散分配（分页、分段 ），注重速度、实时性，管理进程运行空间。

• 外存分配：连续分配、链接分配、索引分配，注重存储容量、长期数据管理，管理文件存储。

• 相同点：有连续、离散分配思路，目标是高效利用空间。

• 不同点：内存关注运行时快速访问，外存关注长期存储；内存分配粒度小（页/段 ），外存分配粒度大（盘块 ）；内存管理复杂（地址变换等 ），外存管理侧重文件组织。

14. 提高磁盘 I/O 速度途径

• 调度算法：用 SSTF（最短寻道优先 ）、SCAN（电梯算法 ）等优化寻道。

• 预读/写：提前读常用数据、延迟写，减少 I/O 次数。

• 缓存：磁盘缓存，把常用数据放内存，减少磁盘访问。

• 硬件优化：用 SSD 替代机械硬盘，提升读写速度；优化磁盘阵列（RAID ），并行读写、容错。

• 文件系统优化：合理分配磁盘块（如簇大小 ）、日志式文件系统（快速恢复 ）。
